// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Workshop.RedisVsPostgresPerformance.Data;

#nullable disable

namespace Workshop.RedisVsPostgresPerformance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230704135903_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Workshop.RedisVsPostgresPerformance.Entities.Telemetry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("AlarmForBeingPushedInLockMode")
                        .HasColumnType("bigint");

                    b.Property<short>("Altitude")
                        .HasColumnType("smallint");

                    b.Property<short>("Angle")
                        .HasColumnType("smallint");

                    b.Property<long>("AxisX")
                        .HasColumnType("bigint");

                    b.Property<long>("AxisY")
                        .HasColumnType("bigint");

                    b.Property<long>("AxisZ")
                        .HasColumnType("bigint");

                    b.Property<long>("BatteryCharging")
                        .HasColumnType("bigint");

                    b.Property<long>("BatteryLevel")
                        .HasColumnType("bigint");

                    b.Property<long>("BlueToothLockBatteryLevel")
                        .HasColumnType("bigint");

                    b.Property<long>("BlueToothLockStatus")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentOperationMode")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceIMEI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeviceIP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ErrorCode")
                        .HasColumnType("bigint");

                    b.Property<long>("FallDown")
                        .HasColumnType("bigint");

                    b.Property<long>("GNSFStatus")
                        .HasColumnType("bigint");

                    b.Property<long>("GSMSignalStrength")
                        .HasColumnType("bigint");

                    b.Property<long>("IgnitionStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("LicencePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("LocationX")
                        .HasColumnType("real");

                    b.Property<float>("LocationY")
                        .HasColumnType("real");

                    b.Property<long>("Movement")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RecievedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Satellites")
                        .HasColumnType("smallint");

                    b.Property<long>("SleepMode")
                        .HasColumnType("bigint");

                    b.Property<short>("Speed")
                        .HasColumnType("smallint");

                    b.Property<long>("TamperDetectionEvent")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TelemetryDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Unplug")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Telemetries");
                });
#pragma warning restore 612, 618
        }
    }
}
